// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using Furnace.Minecraft.Data.GameManifest;
//
//    var gameManifest = GameManifest.FromJson(jsonString);
#nullable enable
using System.Runtime.InteropServices;
using Furnace.Utility;

#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace Furnace.Minecraft.Data.GameManifest
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class GameManifest
    {
        [JsonPropertyName("arguments")]
        public Arguments Arguments { get; set; }

        [JsonPropertyName("assetIndex")]
        public AssetIndex AssetIndex { get; set; }

        [JsonPropertyName("assets")]
        public string Assets { get; set; }

        [JsonPropertyName("complianceLevel")]
        public long ComplianceLevel { get; set; }

        [JsonPropertyName("downloads")]
        public GameManifestDownloads Downloads { get; set; }

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("javaVersion")]
        public JavaVersion JavaVersion { get; set; }

        [JsonPropertyName("libraries")]
        public Library[] Libraries { get; set; }

        [JsonPropertyName("logging")]
        public Logging Logging { get; set; }

        [JsonPropertyName("mainClass")]
        public string MainClass { get; set; }

        [JsonPropertyName("minimumLauncherVersion")]
        public long MinimumLauncherVersion { get; set; }

        [JsonPropertyName("releaseTime")]
        public DateTimeOffset ReleaseTime { get; set; }

        [JsonPropertyName("time")]
        public DateTimeOffset Time { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }
    }

    public partial class Arguments
    {
        [JsonPropertyName("game")]
        public GameElement[] Game { get; set; }

        [JsonPropertyName("jvm")]
        public JvmElement[] Jvm { get; set; }
    }

    public partial class GameClass
    {
        [JsonPropertyName("rules")]
        public GameRule[] Rules { get; set; }

        [JsonPropertyName("value")]
        public Value Value { get; set; }
    }

    public partial class GameRule
    {
        [JsonPropertyName("action")]
        public Action Action { get; set; }

        [JsonPropertyName("features")]
        public Features? Features { get; set; }
    }

    public partial class Features
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("is_demo_user")]
        public bool? IsDemoUser { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("has_custom_resolution")]
        public bool? HasCustomResolution { get; set; }
    }

    public partial class JvmClass
    {
        [JsonPropertyName("rules")]
        public JvmRule[] Rules { get; set; }

        [JsonPropertyName("value")]
        public Value Value { get; set; }
    }

    public partial class JvmRule
    {
        [JsonPropertyName("action")]
        public Action Action { get; set; }

        [JsonPropertyName("os")]
        public PurpleOs Os { get; set; }

        public bool IsTrueForThisSystem()
        {
            if (Os.Name != null)
            {
                if (RuntimeInformation.IsOSPlatform(Os.OsPlatform))
                    return Action == Data.GameManifest.Action.Allow;
                else
                    return Action != Data.GameManifest.Action.Allow;
            }

            if (Os.Arch != null && Os.Arch != "")
            {
                if (System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture == Os.OsArchitecture)
                    return Action == Data.GameManifest.Action.Allow;
                else
                    return Action != Data.GameManifest.Action.Allow;
            }

            return true;
        }
    }

    public partial class PurpleOs
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("name")]
        public Name? Name { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("version")]
        public string Version { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("arch")]
        public string Arch { get; set; }

        [JsonIgnore]
        public Architecture OsArchitecture => Arch switch
        {
            "x86" => Architecture.X86,
            "x64" => Architecture.X64,
            "Arm" => Architecture.Arm,
            _ => throw new InvalidOperationException("Unknown Architecture conversion.")
        };
        
        [JsonIgnore]
        public OSPlatform OsPlatform => Name switch
        {
            Data.GameManifest.Name.Osx => OSPlatform.OSX,
            Data.GameManifest.Name.Linux => OSPlatform.Linux,
            Data.GameManifest.Name.Windows => OSPlatform.Windows,
            _ => throw new InvalidOperationException("Unknown OSPlatform conversion.")
        };
    }

    public partial class AssetIndex
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("sha1")]
        public string Sha1 { get; set; }

        [JsonPropertyName("size")]
        public long Size { get; set; }

        [JsonPropertyName("totalSize")]
        public long TotalSize { get; set; }

        [JsonPropertyName("url")]
        public Uri Url { get; set; }
    }

    public partial class GameManifestDownloads
    {
        [JsonPropertyName("client")]
        public ServerClass Client { get; set; }

        [JsonPropertyName("client_mappings")]
        public Mappings ClientMappings { get; set; }

        [JsonPropertyName("server")]
        public ServerClass Server { get; set; }

        [JsonPropertyName("server_mappings")]
        public Mappings ServerMappings { get; set; }
    }

    public partial class ServerClass
    {
        [JsonPropertyName("sha1")]
        public string Sha1 { get; set; }

        [JsonPropertyName("size")]
        public long Size { get; set; }

        [JsonPropertyName("url")]
        public Uri Url { get; set; }
    }

    public partial class Mappings
    {
        [JsonPropertyName("sha1")]
        public string Sha1 { get; set; }

        [JsonPropertyName("size")]
        public long Size { get; set; }

        [JsonPropertyName("url")]
        public Uri Url { get; set; }
    }

    public partial class JavaVersion
    {
        [JsonPropertyName("component")]
        public string Component { get; set; }

        [JsonPropertyName("majorVersion")]
        public long MajorVersion { get; set; }
    }

    public partial class Library
    {
        [JsonPropertyName("downloads")]
        public LibraryDownloads Downloads { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("rules")]
        public LibraryRule[]? Rules { get; set; }

        [JsonIgnore] 
        public bool SystemMeetsRules => Rules?.All(rule => rule.SystemMeetsRule) ?? true;
    }

    public partial class LibraryDownloads
    {
        [JsonPropertyName("artifact")]
        public Artifact Artifact { get; set; }
    }

    public partial class Artifact
    {
        [JsonPropertyName("path")]
        public string Path { get; set; }

        [JsonPropertyName("sha1")]
        public string Sha1 { get; set; }

        [JsonPropertyName("size")]
        public long Size { get; set; }

        [JsonPropertyName("url")]
        public Uri Url { get; set; }
    }

    public partial class LibraryRule
    {
        [JsonPropertyName("action")]
        public Action Action { get; set; }

        [JsonPropertyName("os")]
        public FluffyOs Os { get; set; }

        [JsonIgnore]
        public bool SystemMeetsRule => (RuntimeInformation.IsOSPlatform(Os.OsPlatform))
            ? Action == Data.GameManifest.Action.Allow
            : Action != Data.GameManifest.Action.Allow;
    }

    public partial class FluffyOs
    {
        [JsonPropertyName("name")]
        public Name Name { get; set; }

        [JsonIgnore]
        public OSPlatform OsPlatform => Name switch
        {
            Name.Osx => OSPlatform.OSX,
            Name.Linux => OSPlatform.Linux,
            Name.Windows => OSPlatform.Windows,
            _ => throw new InvalidOperationException("Unknown OSPlatform conversion.")
        };
    }

    public partial class Logging
    {
        [JsonPropertyName("client")]
        public LoggingClient Client { get; set; }
    }

    public partial class LoggingClient
    {
        [JsonPropertyName("argument")]
        public string Argument { get; set; }

        [JsonPropertyName("file")]
        public File File { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }
    }

    public partial class File
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("sha1")]
        public string Sha1 { get; set; }

        [JsonPropertyName("size")]
        public long Size { get; set; }

        [JsonPropertyName("url")]
        public Uri Url { get; set; }
    }

    public enum Action { Allow };

    public enum Name { Linux, Osx, Windows };

    public partial struct Value
    {
        public string? String;
        public string[]? StringArray;

        public static implicit operator Value(string String) => new Value { String = String };
        public static implicit operator Value(string[] StringArray) => new Value { StringArray = StringArray };
    }

    public partial struct GameElement
    {
        public GameClass? GameClass;
        public string? String;

        public static implicit operator GameElement(GameClass GameClass) => new GameElement { GameClass = GameClass };
        public static implicit operator GameElement(string String) => new GameElement { String = String };
    }

    public partial struct JvmElement
    {
        public JvmClass? JvmClass;
        public string? String;

        public static implicit operator JvmElement(JvmClass JvmClass) => new JvmElement { JvmClass = JvmClass };
        public static implicit operator JvmElement(string String) => new JvmElement { String = String };
    }

    public partial class GameManifest : IJsonConvertable<GameManifest>
    {
        public static GameManifest FromJson(string json) => JsonSerializer.Deserialize<GameManifest>(json, Furnace.Minecraft.Data.GameManifest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GameManifest self) => JsonSerializer.Serialize(self, Furnace.Minecraft.Data.GameManifest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                GameElementConverter.Singleton,
                ActionConverter.Singleton,
                ValueConverter.Singleton,
                JvmElementConverter.Singleton,
                NameConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class GameElementConverter : JsonConverter<GameElement>
    {
        public override bool CanConvert(Type t) => t == typeof(GameElement);

        public override GameElement Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            switch (reader.TokenType)
            {
                case JsonTokenType.String:
                    var stringValue = reader.GetString();
                    return new GameElement { String = stringValue };
                case JsonTokenType.StartObject:
                    var objectValue = JsonSerializer.Deserialize<GameClass>(ref reader, options);
                    return new GameElement { GameClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type GameElement");
        }

        public override void Write(Utf8JsonWriter writer, GameElement value, JsonSerializerOptions options)
        {
            if (value.String != null)
            {
                JsonSerializer.Serialize(writer, value.String, options);
                return;
            }
            if (value.GameClass != null)
            {
                JsonSerializer.Serialize(writer, value.GameClass, options);
                return;
            }
            throw new Exception("Cannot marshal type GameElement");
        }

        public static readonly GameElementConverter Singleton = new GameElementConverter();
    }

    internal class ActionConverter : JsonConverter<Action>
    {
        public override bool CanConvert(Type t) => t == typeof(Action);

        public override Action Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "allow")
            {
                return Action.Allow;
            }
            throw new Exception("Cannot unmarshal type Action");
        }

        public override void Write(Utf8JsonWriter writer, Action value, JsonSerializerOptions options)
        {
            if (value == Action.Allow)
            {
                JsonSerializer.Serialize(writer, "allow", options);
                return;
            }
            throw new Exception("Cannot marshal type Action");
        }

        public static readonly ActionConverter Singleton = new ActionConverter();
    }

    internal class ValueConverter : JsonConverter<Value>
    {
        public override bool CanConvert(Type t) => t == typeof(Value);

        public override Value Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            switch (reader.TokenType)
            {
                case JsonTokenType.String:
                    var stringValue = reader.GetString();
                    return new Value { String = stringValue };
                case JsonTokenType.StartArray:
                    var arrayValue = JsonSerializer.Deserialize<string[]>(ref reader, options);
                    return new Value { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void Write(Utf8JsonWriter writer, Value value, JsonSerializerOptions options)
        {
            if (value.String != null)
            {
                JsonSerializer.Serialize(writer, value.String, options);
                return;
            }
            if (value.StringArray != null)
            {
                JsonSerializer.Serialize(writer, value.StringArray, options);
                return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }

    internal class JvmElementConverter : JsonConverter<JvmElement>
    {
        public override bool CanConvert(Type t) => t == typeof(JvmElement);

        public override JvmElement Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            switch (reader.TokenType)
            {
                case JsonTokenType.String:
                    var stringValue = reader.GetString();
                    return new JvmElement { String = stringValue };
                case JsonTokenType.StartObject:
                    var objectValue = JsonSerializer.Deserialize<JvmClass>(ref reader, options);
                    return new JvmElement { JvmClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type JvmElement");
        }

        public override void Write(Utf8JsonWriter writer, JvmElement value, JsonSerializerOptions options)
        {
            if (value.String != null)
            {
                JsonSerializer.Serialize(writer, value.String, options);
                return;
            }
            if (value.JvmClass != null)
            {
                JsonSerializer.Serialize(writer, value.JvmClass, options);
                return;
            }
            throw new Exception("Cannot marshal type JvmElement");
        }

        public static readonly JvmElementConverter Singleton = new JvmElementConverter();
    }

    internal class NameConverter : JsonConverter<Name>
    {
        public override bool CanConvert(Type t) => t == typeof(Name);

        public override Name Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "linux":
                    return Name.Linux;
                case "osx":
                    return Name.Osx;
                case "windows":
                    return Name.Windows;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void Write(Utf8JsonWriter writer, Name value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Name.Linux:
                    JsonSerializer.Serialize(writer, "linux", options);
                    return;
                case Name.Osx:
                    JsonSerializer.Serialize(writer, "osx", options);
                    return;
                case Name.Windows:
                    JsonSerializer.Serialize(writer, "windows", options);
                    return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class ParseStringConverter : JsonConverter<long>
    {
        public override bool CanConvert(Type t) => t == typeof(long);

        public override long Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception($"Cannot unmarshal type long (string value of {value})");
        }

        public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value.ToString(), options);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
